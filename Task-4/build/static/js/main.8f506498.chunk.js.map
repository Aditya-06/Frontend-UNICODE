{"version":3,"sources":["qnumber.js","question.js","answer.js","answers.js","App.js","serviceWorker.js","index.js"],"names":["Qnumber","props","currentQ","total","Question","question","Answer","classes","selected","push","value","letter","className","join","onClick","buttonClick","option","Answers","options","currentA","App","useState","setCurrentQ","setCurrentA","noOption","handleNoOption","results","showResults","answers","setAnswer","question_bank","map","answer","find","id","questionId","key","description","isCorrect","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f506498.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n// prints the heading displaying information about the progress of user (Eg: 3/5)\r\nfunction Qnumber (props) {\r\n    return (\r\n    <h3>Question {props.currentQ} of {props.total}</h3>\r\n    );\r\n}\r\n\r\nexport default Qnumber;","import React from 'react';\r\n\r\n// responsible for rendering the question\r\nfunction Question (props) {\r\n    return (\r\n        <h1>{props.question}</h1>\r\n    )\r\n\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\n\r\n// responsible for rendering the individual options\r\nfunction Answer(props) {\r\n\r\n    // pushes class 'selected' if the option is selected (Style change)\r\n    let classes = ['answer'];\r\n    if (props.selected) {\r\n        classes.push('selected');\r\n    }\r\n\r\n    // returns an individual option\r\n    return(\r\n        <button value={props.letter} className={classes.join(' ')} onClick={props.buttonClick}>\r\n            {props.letter}. {props.option}\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default Answer;","import React from 'react';\r\nimport Answer from './answer';\r\n\r\n// renders all the options  -- paragraph tags prints approppriate messgae -- Select/Confirm option\r\nfunction Answers (props) {\r\n    return (\r\n        <>\r\n            <div className=\"Answers\">\r\n                <Answer letter='a' option={props.options[0]}  selected={props.currentA === 'a'} buttonClick={props.buttonClick} />\r\n                <Answer letter='b' option={props.options[1]}  selected={props.currentA === 'b'} buttonClick={props.buttonClick}/>\r\n                <Answer letter='c' option={props.options[2]}  selected={props.currentA === 'c'} buttonClick={props.buttonClick}/>\r\n                <Answer letter='d' option={props.options[3]}  selected={props.currentA === 'd'} buttonClick={props.buttonClick}/>\r\n\r\n                \r\n                <p>{props.currentA === '' ? \"Select an Option\" : `Is ( ${props.currentA} ) your final answer?`}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Answers;","import React, { useState, Fragment } from 'react';\nimport Qnumber from './qnumber';\nimport Question from './question';\nimport Answers from './answers';\nimport question_bank from './questions.json';\nimport './App.css';\n\n\nfunction App() {\n\n  // setting hooks-- using state properties\n  const [currentQ, setCurrentQ] = useState(0);\n  const [currentA, setCurrentA] = useState(\"\");\n  const [noOption, handleNoOption] = useState('');\n  const [results, showResults] = useState(false);\n  const [answers, setAnswer] = useState([]);\n\n  // using the current question from the JSON file containing the question-info\n  const question = question_bank[currentQ];\n  \n  \n  // when a option a selected, we do not want an error to be shown--- changing noOption state to blank\n  const buttonClick = e => {\n\n    // we want to store the option selected so we can compare that with the answer\n    setCurrentA(e.target.value);\n    handleNoOption('');\n  }\n\n  const next = () => {\n    // if no option is selected and the user clicks on \"submit and save\", an error message must be dislpayed\n    if (!currentA) {\n      handleNoOption(\"Please select an option...there is no negative marking \");\n      return;\n    }\n\n    // we want to store information about the selected option and store it in an array\n    const answer = {questionId: question.id, answer: currentA};\n    answers.push(answer);\n    setAnswer(answers);\n    setCurrentA('');\n\n    // show next question\n    if (currentQ + 1 < 5) {\n      setCurrentQ(currentQ + 1);\n      return;\n    }\n\n    // show result if all questions have been attempted\n    showResults(true);\n  }\n\n  // prints error message if an option is not selected and user attemptes to move on to the next question\n  const checkForNoOption = () => {\n    if (!noOption) {\n      return;\n    } else {\n      return <>\n      <div>{noOption}</div>\n      </>\n    }\n  }\n\n  // prints appropriate message if selected option matches the correct option\n  const isCorrect = (question, answer) => {\n    if (answer.answer === question.answer) {\n      return (\n        <div className=\"result-correct\">\n          <p>Yay your answer is correct!</p>\n        </div>\n        \n      )\n    } else {\n      return (\n        <div className=\"result-wrong\">\n          <p>The correct answer is {question.answer}</p>\n          <p>Reason: {question.description}</p>\n        </div>\n      )\n    }\n  }\n\n  \n  // Results page-- finds question from question bank with matching id  and returns the results of each question to be rendered\n  const showResultAnalysis = () => {\n    return answers.map(answer => {\n      const question = question_bank.find( question =>\n        question.id === answer.questionId\n      );\n\n      //  renders the result of each question\n      return (\n        <div className=\"results\" key={question.id}> \n          {question.question}\n          {isCorrect(question, answer)}\n      \n          \n        </div>\n      )\n    })\n  }\n\n\n  // after all questions are attempted, returns the results page\n  if (results) {\n    return (\n      <div className=\"container\">\n        <h2>The Results are out !</h2>\n        <div>\n          <ul>\n            {showResultAnalysis()}\n          </ul>\n        </div>  \n      </div>\n    )\n\n    // if all the questions are not attempted, render the next question\n  } else {\n    return (\n      <div className=\"container\">\n        <Qnumber total=\"5\" currentQ={question.id} /> \n        <Question question={question.question} />\n        <span id=\"error\">{checkForNoOption()}</span>\n        <Answers options={question.option} currentA={currentA} buttonClick={buttonClick}/>    \n        <button className=\"btn btn-next\" onClick={next}>Save and next</button>\n      </div>\n    )\n  }\n\n \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}